[{"categories":null,"content":"This post is about how I fell in love in 2021. It‚Äôs my first anniversary today, and many more to come till the day I die. Yeah, that‚Äôs the bond we‚Äôve formed in such a short time, a bond that I humbly believe won‚Äôt break ever. Looking back at the past year, it has been a ride full of exhilaration as well as some self-doubt but one thing I can say for sure is that it has been one of the best damn journeys I‚Äôve ever embarked on.\nI‚Äôm celebrating my one-year lifting journey! üéâ¬†16th November 2021 - The day when it all began. I had been trying to adopt a healthy lifestyle for the longest time as 12 hours sitting in front of the computer wasn‚Äôt making my body very happy (and of course, I wanted to have those abs and a perfect beach body). The problem was me being me, who wanted to stay away from any physical activity whatsoever wasn‚Äôt on board with the idea of going to the gym. It was when one of my close friends joined the gym (who was even a bigger couch potato than I was) that made me ponder ‚ÄúIf she can do it, what‚Äôs stopping me?‚Äù. As silly as it might sound, that was the foundation of my lifting journey.\nWrapped from head to toe in the chilly winters of December 2020, heading towards the gym at 6:00 am wintry morning. It used to be dark and temperatures used to be as low as 5 degrees. I used to sleep by 9:30 pm, wake up by 4:30 am, have my pre-workout meal at 5:00 am, and leave by 6:00 am. From sleeping at 4:30 am to waking up at 4:30 am, lifting certainly made me do some crazy stuff. After arriving home, my upper body was in a lot of pain! I wasn‚Äôt able to move, raise my arms, or do anything. I also took a day off from the office.\nThat‚Äôs an excerpt from the first week of the weekly workout check-ins that I decided to do when I started going to the gym (of course, I didn‚Äôt do any after the first week). I remember my mom massaging me using Iodex to relieve that pain :D It‚Äôs funny how my life changed remarkably just a week after joining the gym. I used to be in constant soreness, my days used to revolve all around lifting and diet, and my daily knowledge consumption shifted from tech to fitness. I spent weeks after weeks learning about exercises, body anatomy, stimulus, structuring diet, and whatnot - basically how the whole fitness domain works and I had some big enlightenments that completely changed the way how I look at fitness.\nOut of all the things that I learnt, the one thing that stood out was the realisation that I am in complete control of my body. Now why this seemingly simple fact was such a big eye-opener for me because before getting into fitness, I was under the impression that transformations happen somehow via magic or at least something that you don‚Äôt have much control over. For instance, I used to think that if you‚Äôre overweight, you have to run and exercise and ‚Äúhope‚Äù that you‚Äôll lose weight. Wait, what? As a software engineer, I‚Äôm used to logic and deterministic behaviour, not ‚Äúhope‚Äù that things will work (Okay, I still hope for my code to work but we‚Äôll not get into that). And part of the reason why I formed this opinion was that whenever I had tried making a change to my body, I had failed miserably. As a super skinny kid, I tried gaining weight, and fast-forward a few years to my college days, I started running to lose weight. Both times, I failed and frustrated, I stopped trying altogether and went back to my inactive lifestyle.\nA glimpse of how I managed to ingest ~150g of protein a day for the past year. Being a vegetarian, it's a little tricky to complete the protein intake but it's very doable if you include whey protein. I must have eaten more paneer \u0026 soya chunks in the past year than all of the years combined before that. If you think working out is the difficult part, try eating \u003e3000Cal a day for a few months and that might change your mind. * Drumroll * To my relief, that‚Äôs not how things work. I learnt that there‚Äôs a very structured approach to fitness \u0026 body transformations and the best part is, there‚Äôs no luck involved! If you‚Äôre willing to put in the effort, you are gonna get the results. No hidden clauses, no asterisks, and no terms and conditions! How cool is that, right? Now that realisation was like a superpower that I gained. And using that superpower, I set my goals and gained 10+ Kgs in the first 8 months and lost 10+ Kgs in the last 4 months. If you‚Äôre curious why I did this ping pong of gaining and losing (No, it wasn‚Äôt just to try out the superpower although I now know that it works), the technical term is bulking (for gaining muscle) and cutting (for losing fat) and this is something bodybuilders do all the time. Oh yes, I won‚Äôt shy away from calling myself a bodybuilder, albeit a budding one.\nThe Big Three - Squats, Bench, and Deadlifts. I unquestionably love doing these lifts. One might argue that these aren't the best for hypertrophy but will that 10% optimization even matter if you don't enjoy doing what you do and eventually give up? Lifting has become an integral part of my life now. It‚Äôs something that I look forward to every single day, something that brightens up my day no matter what I‚Äôm going through, and something that gives me energy and peace at the same time. I had some euphoric moments throughout the last year, for instance, the first time when I was finally able to do pull-ups. It was a big win for me that day, and the starting of vmlifts!\nThe best thing about lifting is that you can see yourself grow. You‚Äôll fail, train, and finally succeed! And then the process repeats. There‚Äôs no destination, once you reach your targets, further targets open up to be achieved. And that‚Äôs the beauty of lifting that correlates to most of the things in life. This lifting journey has truly been an eye-opener for me that has taught me a lot of things - the power of perseverance, hard work, being honest with yourself, and self-discipline. You won‚Äôt see visible results in days, weeks, or maybe even months but the one who perseveres is eventually gonna reap the benefits. There will be days when you won‚Äôt feel like training no matter how motivated you usually are, and there will be days when you‚Äôll think of giving up on your diet. But if you can still persevere through these hurdles, I would say you have truly won over yourself! And there‚Äôs no one you can credit or blame for anything, you‚Äôll own the success, and you have to own the failure as well.\nTo myself and everyone who‚Äôs trying to be a better version of themselves, be it achieving their dream physique, or their most ambitious career goals - Trust the process, we all are gonna make it!\nExtremely happy but not content. This is just the beginning and there's a long way to go. I'm unstoppable today! ","description":"","tags":["lifting"],"title":"I‚Äôm unstoppable today!","uri":"/blog/im-unstoppable-today/"},{"categories":null,"content":"I‚Äôm enjoying some free time as there‚Äôs a month gap between when my internship ended at Cityflo and my joining as a full-time Software engineer at AppDynamics.\nDuring this time, quite a chunk went into developing this blog.\nI‚Äôm also trying to sort my routine a bit by adopting a healthy lifestyle. I thought of three simple things to start with\nSleep on time and wake up early Stop using screen 30mins before sleep Exercise at least a half-hour everyday I‚Äôll update on how it goes.\nWhat is a now page?\n","description":"","tags":null,"title":"What I‚Äôm Doing Now","uri":"/now/"},{"categories":null,"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u003ch1\u003e‚Äî\u003ch6\u003e elements represent six levels of section headings. \u003ch1\u003e is the highest section level while \u003ch6\u003e is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don‚Äôt communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables Tables aren‚Äôt part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Code block indented with four spaces \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Code block with Hugo‚Äôs internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements ‚Äî abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike‚Äôs talk during Gopherfest, November 18, 2015.¬†‚Ü©Ô∏é\n","description":"","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/blog/my-first-post/"},{"categories":null,"content":"I used to believe that contributing to open source would be the stamp of approval I‚Äôd need to be taken seriously as a developer. I would look for a project to contribute to, pour over the issue list, find one marked ‚Äúgood first contribution‚Äù, and dig in.\nI repeated this process many times. I can count on one hand how many of those times actually resulted in a contribution. This was a forced strategy. I was often confused on how to start. I lacked sufficient context and had difficulty communicating my struggle with others. It made me feel like a fraud.\nI‚Äôve read tons of posts about ‚Äúhow to contribute to open source‚Äù. Most of them are along the lines of:\nFind a project you like Read some issues Get involved Be a hero Many people have had success with this process, and there‚Äôs definitely positives that come with it. This can‚Äôt be overlooked. But! I stand by my belief that it feels forced.\nContribute out of necessity Spend enough time in your programming language‚Äôs ecosystem, and you‚Äôll come across weird edge cases and annoying roadblocks with other people‚Äôs code. Most of the time these obstacles have already been met. Google the error, find the corresponding GitHub issue, read the discussion, implement the fix, and move on.\nSometimes there is no issue. The world is quiet, and you alone are left with the task of figuring out wtf is going on. In my experience, this is the most effective way to contribute to open source.\n‚ÄúNecessity is the mother of invention.‚Äù\nIt was a natural progression that led you to this moment. You have all the context you need, because you‚Äôre the user. You understand what the code should be doing. You may not know how to fix it at this moment, and you may never figure it out, but contributing to open source is much more than shipping code.\nOpen an issue. Describe how to reproduce it. Make a proof of concept so others can see what‚Äôs going on without much effort. This will teach you how to communicate technical details.\nThis can go 1 of 2 ways:\nYou are missing a crucial detail that will fix your problem easily, allowing you to move on and get back to work. You did in fact find a bug, and have now alerted the community to its presence. If its #2, you‚Äôre on the right track! Eventually others will find your newly minted issue. Discussions will begin. You can contribute to these discussions, and you should!\nBefore waiting for an answer from the maintainers, see if you can solve the issue yourself. Jump into the codebase. If you find a fix, open a pull request. If you‚Äôre not sure, report what you‚Äôve learned in the issue‚Äôs discussion.\nTo me, this is a better way to contribute to open source. Eventually the problems will find you, and it‚Äôs up to you to decide how to deal with it.\n","description":"Contributing to open source projects can be a daunting task for developers, regardless of experience level. It‚Äôs an intimidating process. In this post I want to discuss a way a more natural approach to open source contributions.","tags":["Musings","Open Source"],"title":"On Contributing to Open Source","uri":"/blog/contributing-to-open-source/"},{"categories":null,"content":" This post is meant to guide you through a working example on CodeSandbox. I recommend following along on a desktop. üëæ\nIn the first post of this series I introduced compound components, a group of components that work in tandem to produce some common functionality. I explained how to:\nadd ‚Äúsub-components‚Äù to a parent using the static keyword loop through the direct children of a component using React.Children.map identify specific children using the displayName property edit children by passing them additional props using React.cloneElement These techniques provide a unique ability to abstract away irrelevant implementation details, resulting in a clean API for the end user.\nRevisiting drawbacks Even though we accomplished what we set out to do in that first post, the solution was quite fickle. Here are a few inconvenient truths posed as questions that you may or may not have asked yourself while following along.\n‚ÄúI have to use this strange displayName property to identify a component?‚Äù\n‚ÄúI can only access direct children inside React.Children.map?‚Äù\n‚ÄúI have to clone the component I want to pass data to? That doesn‚Äôt sound good for performance.‚Äù\nIn my opinion, the biggest drawback surrounds React.Children.map. Not only does it bloat the render method, but it also has the limitation of only giving you access to the direct children of the component you‚Äôre rendering.\n1 2 3 4 5 6 7 8 {React.Children.map(this.props.children, child =\u003e { /* only direct children */ /* if statements everywhere! */ if (child.type.displayName === 'Thing') {} if (child.type.displayName === 'OtherThing') {} })} This isn‚Äôt a long term solution. An alternative one would need to handle the following use cases:\nChildren should be accessible at all levels of the component tree A child should be able to explicitly subscribe to a piece of state A cloning process should not be required to pass data down to children Does such a solution exist?\nReact‚Äôs Context API Enter the Context API, a new addition to the React library in version 16.3. The API allows a component to pass data down to any of its children, whether they are direct or indirect. The official React docs give a great description of what Context is meant for:\nContext is designed to share data that can be considered ‚Äúglobal‚Äù for a tree of React components\nThere are a slew of great tutorials on this topic, but the offical docs are, in my opinion, the most helpful. I recommend pausing here and brushing up on the concept before moving forward.\nGetting started I‚Äôve created a starter template on CodeSandbox. It starts exactly where we left off in the last post, with a working implementation of a basic compound component named Chat. If you haven‚Äôt read that post it may be helpful to do so in order to gain some context. üòÇ\nIn src/index.js the Chat component is being rendered with three children components. Together they make up a single compound component.\n1 2 3 4 5 6 7 // src/index.js \u003cChat\u003e \u003cChat.Messages /\u003e \u003cChat.Input /\u003e \u003cChat.Button /\u003e \u003c/Chat\u003e Because of the nature of this example, these components don‚Äôt come with a bundle of options that can be passed as props. The surface API is practically non-existent, however, it should be obvious to anyone reading the code what is happening here.\nCreating context To start, open up src/components/Chat.js and edit the file so that you are importing the createContext method from the react library. Call the method near the top of the file and set the result equal to a new variable named ChatContext.\n1 2 3 4 5 6 7 // src/components/Chat.js import React, { Component, createContext } from 'react' // ... const ChatContext = createContext() The createContext method returns an object containing a Provider and Consumer pair. The former exposes data to the latter.\nThe Chat component will need to be refactored so that it renders the Provider. This means that the unsightly React.Children.map method can finally take hike:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // src/components/Chat.js // ... render() { const { children } = this.props return ( \u003cChatContext.Provider\u003e \u003ch1\u003eChatroom\u003c/h1\u003e {children} \u003c/ChatContext.Provider\u003e ) } The change above will cause the app to error, but don‚Äôt sweat it. The fix will be arriving shortly.\nProviding context The ChatContext.Provider requires a single prop named value. This prop can be thought of simply as the actual context being provided, and any underlying Consumers will have access to it.\n1 2 3 \u003cProvider value={context}\u003e /* consumers can access context here */ \u003c/Provider\u003e In order to know what the value prop should be, take a look at all of the props that the sub-components of Chat currently require in order to function.\nMessages requires a messages prop Input requires a value prop and an onChange prop Button requires an onClick prop The values of these props all exist somewhere in the Chat component, either in this.state or as class methods. We can combine them into a single object and assign it to the value prop for ChatContext.Provider. This can be done in one of two ways.\nThe first way is to simply create a new object, we‚Äôll call it context, at the top of the render method with all the necessary data inside of it. Then we can pass that object to ChatContext.Provider:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // src/components/Chat.js // ... render() { const { children } = this.props; const { messages, currentMessage } = this.state; const { updateCurrentMessage, add } = this; const context = { messages, currentMessage, updateCurrentMessage, add } return ( \u003cChatContext.Provider value={context}\u003e \u003ch1\u003eChatroom\u003c/h1\u003e {children} \u003c/ChatContext.Provider\u003e ) } Although this works, there is a significant downside. The context object must be re-created every time the Chat component renders, even if none of the values inside of the object have changed. This will inevitably cause some unnecessary re-rendering of the components below.\nThe second and more performant way to handle this would be to add the methods to the state object of Chat, and pass the state directly to ChatContext.Provider:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // src/components/Chat.js class Chat extends Component { // ... updateCurrentMessage = event =\u003e {/* */}; add = () =\u003e {/* */}; state = { currentMessage: \"\", messages: [], updateCurrentMessage: this.updateCurrentMessage, add: this.add }; render() { const { children } = this.props \u003cChatContext.Provider value={this.state}\u003e {children} \u003c/ChatContext.Provider\u003e } } The first time I saw this my left eye started to twitch. It‚Äôs weird. I get it. But this prevents any underlying sub-components from re-rendering unnecessarily.\nConsuming context The last step in this refactor is to update the sub-components of Chat so that they consume the context created earlier instead of relying on props. In order for this to happen we‚Äôll first need to export ChatContext.Consumer out of Chat.js.\n1 2 3 4 5 // src/components/Chat.js // ... export const ChatConsumer = ChatContext.Consumer In each sub-component you can now import ChatConsumer and render it as the root element of each.\n1 2 3 4 5 6 7 8 9 10 // src/components/Messages.js import React from 'react' import { ChatConsumer } from './Chat' const Messages = () =\u003e ( \u003cChatConsumer\u003e {({ messages }) =\u003e (/* render Messages */)} \u003c/ChatConsumer\u003e ) 1 2 3 4 5 6 7 8 9 10 // src/components/Input.js import React from 'react' import { ChatConsumer } from './Chat' const Input = () =\u003e ( \u003cChatConsumer\u003e {({ currentMessage, updateCurrentMessage }) =\u003e (/* render Input */)} \u003c/ChatConsumer\u003e ) 1 2 3 4 5 6 7 8 9 10 // src/components/Button.js import React from 'react' import { ChatConsumer } from './Chat' const Button = () =\u003e ( \u003cChatConsumer\u003e {({ add }) =\u003e (/* render Button */)} \u003c/ChatConsumer\u003e ) Note: The Consumer returned by the createContext method uses a render prop. Familiarity with this render prop pattern will definitely be of use here.\nBefore this refactor, the sub-components of Chat relied on props passed in during the React.cloneElement process. Now, instead of mapping through each child and cloning them, they can each explicitly declare what data they need from the Provider above. This data is a drop-in replacement for the props that were being used before, albeit with a few name changes.\nFor instance, Button used to expect an onClick prop, which was a reference to the add method on the Chat component. Now it gets direct access to add via Context:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Before const Button = ({ onClick }) =\u003e ( \u003cbutton onClick={onClick}\u003eSend\u003c/button\u003e ) // After const Button = () = ( \u003cChatConsumer\u003e {({ add }) =\u003e ( \u003cbutton onClick={add}\u003eSend\u003c/button\u003e )} \u003c/ChatConsumer\u003e ) The Input component also has a few name changes you‚Äôll need to address. Originally it expected a value and an onChange prop. These were just mappings to this.state.currentMessage and the updateCurrentMessage method on the Chat component respectively:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Before const Input = ({ value, onChange }) =\u003e ( \u003cinput type=\"text\" value={value} onChange={onChange} /\u003e ); // After const Input = () =\u003e ( \u003cChatConsumer\u003e {({ currentMessage, updateCurrentMessage }) =\u003e ( \u003cinput type=\"text\" value={currentMessage} onChange={updateCurrentMessage} /\u003e )} \u003c/ChatConsumer\u003e ); With these changes all errors should be resolved and the application should be working properly as before!\nThe story so far That wasn‚Äôt too much work. I‚Äôve definitely had tougher refactors. But, was it worth it? It really depends on your use case. In my opinion, constructing compound components with this strategy is almost always worth it. Especially if you do it this way the first time around.\nLet‚Äôs hop into src/index.js and see what happens when we apply the same test as the previous post, wrapping Chat.Button in a div element.\n1 2 3 4 5 6 7 8 9 // src/index.js \u003cChat\u003e \u003cChat.Messages /\u003e \u003cChat.Input /\u003e \u003cdiv\u003e \u003cChat.Button /\u003e \u003c/div\u003e \u003c/Chat\u003e Last time we did this, Chat.Button stopped working due to the fact that it wasn‚Äôt receiving its onClick This time our app still works!\nContext has solved our number one problem: passing information to children no matter where they‚Äôre at in the component tree. You can nest that button in a hundred divs and the sucker will still work.\nThis provides loads of flexiblity to the end user. There is only a single constraint being placed on them, which is that all sub-components of Chat must be rendered beneath Chat. A pretty fair tradeoff I‚Äôd say.\nWhich leads me to my final point of this post. What were to happen if you decided not to render a sub-component, say Chat.Button, underneath Chat?\n1 2 3 4 5 6 7 8 9 10 11 // Here there be errors, arrrgh! const App = () =\u003e ( \u003cdiv\u003e \u003cChat\u003e \u003cChat.Messages /\u003e \u003cChat.Input /\u003e \u003c/Chat\u003e \u003cChat.Button /\u003e \u003c/div\u003e ) Yes, an ugly little error! This is a use case we haven‚Äôt planned for, and the chances of this happening in the wild are quite high, especially if you‚Äôre working with open source software.\nValidating consumers This is a nifty trick I picked up from the Advanced React Patterns course given by Kent C Dodds.\nLet‚Äôs talk about the createContext method real quick. createContext can take an optional argument, defaultValue:\n1 const Context = createContext(defaultValue) defaultValue comes in to play when a Consumer is rendered outside of a matching Provider.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // a quick example const { Provider, Consumer } = createContext('red') const Blue = () =\u003e ( \u003cProvider value='blue'\u003e \u003cConsumer\u003e{color =\u003e \u003ch1\u003e{color}\u003c/h1\u003e}\u003c/Consumer\u003e \u003c/Provider\u003e ) const Red = () =\u003e ( \u003cConsumer\u003e{color =\u003e \u003ch1\u003e{color}\u003c/h1\u003e}\u003c/Consumer\u003e ) This is great and all, but a default value is not very helpful in the case of compound components. So what else can we do?\nOne way to prevent users of Chat from rendering sub-components in the wrong place is to warn them when they‚Äôre doing so. This can be done by updating the ChatConsumer to throw an error if no context is found.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // src/components/Chat.js export const ChatConsumer = ({ children }) =\u003e ( \u003cChatContext.Consumer\u003e {context =\u003e { if (!context) { throw new Error( \"You do bad thing here!\" ); } return children(context); }} \u003c/ChatContext.Consumer\u003e ) ChatConsumer can continue to be used like normal, except now it will throw if it‚Äôs rendered out of place. Much more helpful to our users don‚Äôt you think? To be even more helpful you may want to craft a more appropriate error message. Something like, Compound components of Chat should render beneath Chat.\nConclusion Hopefully this example has given you a better understanding of how compound components can work with the Context API. Possibilities abound!\nReach out to me on Twitter if you have any questions related to this post, or if you just want to talk shop! I would also love to know your thoughts on these walkthrough-style blog posts. Happy coding!\n","description":"In the first post of this series we discussed the basics of compound components in React. They are a group of components that work in tandem to produce some functionality. Unfortunately, there are some constraints when authoring components in this way. In this post we‚Äôll combine the flexibilty of compound components with the powerful React Context Api.","tags":["React"],"title":"Compound Components in React: Using the Context API","uri":"/blog/compound-components-and-the-context-api/"},{"categories":null,"content":" This post is meant to guide you through a working example on CodeSandbox. I recommend following along on a desktop. üëæ\nAt the end of 2017 Kent C. Dodds released a fantastic set of videos called Advanced React Component Patterns on egghead.io. In them he spent some time discussing an idea termed compound components.\nI had gone into those videos with a focus on learning more about render props and context, so it‚Äôs funny to look back over a half-year later and realize that out of everything in the series (which I highly recommend), compound components have slowly progressed from being an overlooked technique to one of my favorite ways of composing UI.\nWhat are compound components? Take a second to look at the documentation for semantic-ui-react, notably their Form component. It shouldn‚Äôt take long before you notice something different about the way this component is being declared.\n1 2 3 4 5 6 7 8 9 10 11 import { Form } from 'semantic-ui-react' const Usage = () =\u003e ( \u003cForm\u003e \u003cForm.Group\u003e \u003cForm.Input /\u003e \u003cForm.Select /\u003e \u003cForm.Button /\u003e \u003c/Form.Group\u003e \u003c/Form\u003e ) Form is an example of a compound component. It is made up of a subset of other components that all work in tandem to produce some functionality.\nNote that I never imported Form.Group or Form.Input, etc., just the Form itself. This is an important observation and we will find out how this is possible later.\nI also want to point out that the object dot-notation-esque syntax seen in the example above is not the de-facto way of writing compound components. In fact, this incredibly informative talk given by Ryan Florence on the topic never uses this syntax at all.\nIt‚Äôs not required, however in 2018 it is possible and therefore I opt for that route.\nWhat problems do they solve? There is a reason that I chose semantic-ui-react as an example of a library utilizing compound components. In fact, the majority of their components are authored using this technique.\nWhy would they do that? There has to be a good reason, right?\nThere is, actually. You see, when you build a component library like semantic-ui-react, your end users are front end developers with a host of their own problems as well. Problems like ill-defined project requirements, constant design changes, poorly documented code. The list goes on.\nYou don‚Äôt want to be a part of that list. In fact, your goal should be to alleviate some of the pain that stems from that list. Compound components are a step in that direction.\nThey provide flexibility for the end user. They abstract away a lot of moving parts by managing state within themselves, state that the end user shouldn‚Äôt need to worry about. If written properly, compound components could turn code written in a fettuccine alfredo-like fashion into a box of well-designed legos.\nGetting started Still reading? Cool. Let‚Äôs write some code.\nNormally I would create an example project on GitHub, but with the advent of CodeSandbox that just seems silly now-a-days. If you‚Äôre not familiar with CodeSandbox, are you alive friend? Are you living? Jokes aside, it‚Äôs a browser-based development environment with a host of other cool features.\nWe‚Äôre going to be building a simple chat application that manages a few different pieces of state such as the current message value and the entire list of messages sent. The goal is to have all of these pieces working together fluidly behind the scenes, while still providing flexibilty for the user of the component.\nI‚Äôve created the initial project structure using CodeSandbox‚Äôs creact-react-app template here. After you sign in you can fork the template to your own sandbox.\nWhen you open up the template you should see a src/components directory with four components:\nChat - the parent component that manages the entire state of the chat app.\nMessages - renders a list of all messages that have been sent.\nInput - allows a user to enter a new message.\nButton - sends a message.\nIsn‚Äôt this sufficient? Sure, the code that currently exists is sufficient for most cases, but it‚Äôs like a stiff piece of cardboard. There‚Äôs no flexibility! What if you wanted to change the rendering order of Chat, maybe by moving the messages below the input? What if you wanted to invert design control of each message over to the user? This is what compound components will give you.\nIn order to achieve this we‚Äôll need to discuss three things:\nstatic properties React.Children.Map React.cloneElement The items above are what enable compound components using the dot-notation syntax that semantic-ui-react utilizes so heavily. We‚Äôll be using them to refactor the existing project. If you can understand these three things then you‚Äôre on your way to crafting some truly awesome components.\nstatic properties The static keyword was introducted in ES6 as a way to define static methods on a javascript class. In order to use them you‚Äôll need to configure your project to support Class Fields \u0026 Static Properties, a Stage-3 TC39 proposal. Luckily, create-react-app supports this out-of-the-box. Yay facebook, amirite?\nNote: If you are following along with another project that isn‚Äôt bootstrapped with create-react-app, you can enable this feature via babel-plugin-transform-class-properties.\nLet‚Äôs take the first step towards a more flexible Chat component by adding three static properties called Messages, Input and Button, with their values equal to the corresponding components:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // src/components/Chat.js import React, { Component } from 'react' import Messages from './Messages' import Input from './Input' import Button from './Button' class Chat extends Component { static Messages = Messages static Input = Input static Button = Button // ... } I‚Äôm going to refer to these static properties as ‚Äúsub-components‚Äù from this point forward. They will eventually enable us to invert layout control over to users of Chat. However, declaring them as static properties isn‚Äôt enough. Currently they aren‚Äôt doing anything. Why is that?\nTake a look at the Chat component‚Äôs render method:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // src/components/Chat.js class Chat extends Component { // ... render() { const { currentMessage, messages } = this.state; const { updateCurrentMessage, add } = this return ( \u003cdiv\u003e \u003ch1\u003eChatroom\u003c/h1\u003e \u003cMessages messages={messages} /\u003e \u003cInput value={currentMessage} onChange={updateCurrentMessage} /\u003e \u003cButton onClick={add} /\u003e \u003c/div\u003e ) } } The layout is still hardcoded, going against our flexible philosophy. What we desire is to have the user of the component determine how things render. In order to do this, we first need to remove the Messages, Input and Button components from the render method completely. Let‚Äôs also remove the variables defined at the beginning of render since we aren‚Äôt using them at the moment:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // src/components/Chat.js class Chat extends Component { // ... render() { return ( \u003cdiv\u003e \u003ch1\u003eChatroom\u003c/h1\u003e \u003c/div\u003e ) } } We‚Äôre no longer hardcoding the layout, so users of Chat can explicitly declare it in their own code using the dot-notation syntax. Let‚Äôs simulate this by updating the App component in src/index.js with the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 // src/index.js function App() { return ( \u003cdiv className=\"App\"\u003e \u003cChat\u003e \u003cChat.Messages /\u003e \u003cChat.Input /\u003e \u003cChat.Button /\u003e \u003c/Chat\u003e \u003c/div\u003e ); } Things are slowly starting to take shape, but now the app is broken. All that‚Äôs rendering is \u003ch1\u003eChatroom\u003c/h1\u003e. At first glance, you might think the solution would be to render this.props.children underneath it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // src/components/Chat.js class Chat extends Component { // ... render() { const { children } = this.props return ( \u003cdiv\u003e \u003ch1\u003eChatroom\u003c/h1\u003e {children} \u003c/div\u003e ) } } However, now we get an error. The error stems from the fact that Chat.Messages is not getting a messages prop the way it did when we were hardcoding the layout in the render method. This also means that the other two components, Chat.Input and Chat.Button, are not getting their props either.\nWe can‚Äôt put the onus on the user to pass those props around. They don‚Äôt even have access to them. They‚Äôre tucked away in a black box. So now the question becomes, how do we keep this flexible component syntax while also passing data?\nThis is where the next two items on our list of things to discuss, React.Children.map and React.cloneElement, come in to play.\nReact.Children.map According to the React docs, React.Children is a top-level API that ‚Äúprovides utilities‚Äù for dealing with this.props.children. One of those utilities is React.Children.map. It behaves similarly to the native Array.map method in JavaScript. It iterates through a component‚Äôs direct children, allowing you to manipulate each child in any way you see fit:\n1 2 3 React.Children.map(this.props.children, child =\u003e { /* do stuff */ }) Let‚Äôs update the render method of Chat, using React.Children.map to return each child:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // src/components/Chat.js // ... render() { const { children } = this.props; return ( \u003cdiv\u003e \u003ch1\u003eChatroom\u003c/h1\u003e {React.Children.map(children, child =\u003e { return child; })} \u003c/div\u003e ); } After you save, you‚Äôll notice that the error is still there. That‚Äôs because we‚Äôre still not passing any props to the children. Luckily, React gives us another utility to make this happen.\nReact.cloneElement The last item to discuss is React.cloneElement, another method offered by the React API. According to the docs, React.cloneElement will:\n‚ÄúClone and return a new React element using element as the starting point.‚Äù\nThat‚Äôs useful. Not only do we have the ability to map over this.props.children, but we also have the ability to transform those children. The next line in the docs provides more insight into how this is done:\n‚ÄúThe resulting element will have the original element‚Äôs props with the new props merged in shallowly. New children will replace existing children.‚Äù\nSo, React.cloneElement provides a transformation window in which you can replace an existing element with a copy of itself. This copy, or clone, can accept additional props you explicitly define during the cloning process.\nIt‚Äôs important to note that React performs a ‚Äúshallow merge‚Äù with these additional props and any props that existed on the element before it was cloned. Therefore, if the cloned element previously had a prop named foo, and you decide to add an additional prop that is also named foo during the cloning process, your prop will overwrite the old one.\nWith this information, along with React.Children.map, we have everything we need to access the sub-components of Chat and pass them the data they need. However, in order to do this you need a mechanism for identifying specific children. This is important, else you wouldn‚Äôt be able to pass the right prop to the right child.\nFurthermore, it‚Äôs not enough to just clone each child willy-nilly, because there will undoubtedly be children that should be left alone. You have to think about these use cases when building compound components that will be used by other developers.\nIdentifying children There are a few ways to do this, and they‚Äôre all relatively similar. I‚Äôll show you the way that my team and I identify specific children as it has worked well for us. We use a property on components called displayName. According to the docs, the displayName property is primarily used for debugging purposes, however I find it useful here.\nYou can explicitly add a displayName to any class or function component. It‚Äôs the same as adding propTypes or defaultProps:\n1 2 3 4 5 6 7 8 9 // src/components/Messages.js const Messages = ({ messages }) =\u003e ( // ... ) Messages.displayName = \"Messages\" 1 2 3 4 5 6 7 8 9 // src/components/Input.js const Input = ({ value, onChange }) =\u003e ( // ... ) Input.displayName = \"Input\" 1 2 3 4 5 6 7 8 9 // src/components/Button.js const Button = ({ onClick }) =\u003e ( // ... ) Button.displayName = \"Button\" This value is now accessible on each child inside of the React.Children.map via child.type.displayName:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // src/components/Chat.js // ... render() { const { messages, currentMessage } = this.state const { children } = this.props const { updateCurrentMessage, add } = this return ( \u003cdiv\u003e \u003ch1\u003eChatroom\u003c/h1\u003e {React.Children.map(children, child =\u003e { if (child.type.displayName === 'Messages') { return React.cloneElement(child, { messages }) } if (child.type.displayName === 'Input') { return React.cloneElement(child, { value: currentMessage, onChange: updateCurrentMessage }) } if (child.type.displayName === 'Button') { return React.cloneElement(child, { onClick: add }) } return child })} \u003c/div\u003e ) } With the code above we are now identifying specific children of the Chat component using their set displayName, cloning them, and passing each custom props.\nThe lingering error message should now be gone and everything should be working properly! You just wrote your first compound component, albeit a pretty basic one. It‚Äôs definitely more flexible and user-friendly than before, but not by much.\nDrawbacks We now have a group of components that manage themselves internally and allow the user to manipulate their layout order. This is nice, however there are a few ‚Äúholes‚Äù in our component‚Äôs design.\nWhat would happen if you wanted to wrap any of the sub-components in another component, or even a simple div? This seems like a logical choice a developer would make. Give it a shot. Wrap Chat.Button in a div. What happens?\nThe component still renders, however if you try to send a message nothing happens. But why? We cloned Chat.Button and passed it the onClick prop, did we not?\nNo, in this scenario we didn‚Äôt, because Chat.Button is no longer a direct child of Chat. That seat is now held by the innocent looking div element. This is where the limitations of React.Children.map begin to show. If you really want to craft a flexible compound component, you‚Äôll have to take things a step further (more below).\nConclusion Let‚Äôs take a step back and review:\nWe learned about static properties and how they allow us to use the dot-notation syntax with sub-components. We learned about certain utilities the React API provides like React.Children.map and React.cloneElement. We learned how to identify specific children using the displayName property. We used all of this information to craft a flexible compound component that manages its own state and inverts layout control to the user. In the next post we will address the drawbacks of React.Children.map by refactoring Chat to use the Context API, giving us the ability to pass data to any child no matter their level in the component tree.\n","description":"Compound components are a fairly new technique that has become popular in the React community. In this post I will discuss what they are, why they are useful, and how to get started using them in your projects.","tags":["React"],"title":"Compound Components in React: The Basics","uri":"/blog/compound-component-basics/"},{"categories":null,"content":"Now that 2018 is upon us I think it‚Äôd be a great time to reflect on the prior year and all that came with it. 2017 was a big year for me in terms of personal growth and clarity. I started off with a few major goals in mind.\nI started a new job My biggest goal of last year was to move to a new company as a developer. In April I crossed that goal off the list by joining a small startup here in South Florida. It‚Äôs my second role as a developer since beginning this wild and trying journey.\nRead 12 books This was my favorite goal of last year. I rediscovered my love for reading recently and decided to prioritize at least 30 minutes of my time each day to a given book. I found it best to spend the last 30-45 minutes of my day with a book before going to sleep. It helps calm the mind and removes any exposure to screens that may disrupt my sleeping. Here were some of my favorite reads of 2017:\nAlexander Hamilton, Ron Chernow Astrophysics For People In A Hurry, Neil Desgrasse Tyson A Feast For Crows, George R.R. Martin 1984, George Orwell Ready Player One, Ernest Cline The Big Short, Michael Lewis I (mostly) kept up with the front-end ecosystem One of the more challenging things about web development is the sheer amount of information there is to learn, and how fast the landscape of the industry changes. I wanted 2017 to be about finding an efficient way to keep up-to-date with the goings on in JavaScript land, and to do so I created a nice selection of resources that always keeps me ‚Äúin the loop‚Äù. The 2 biggest things I did this year were join various newsletters around front-end development and follow knowledgeable humans in the realm of JavaScript, build tools, performance, and CSS on Twitter.\nBelow are some recommendations:\nNewsletters JavaScript Weekly React Newsletter CSS Weekly Pony Foo Weekly Twitter users Kent C Dodds Sean Larkin Dan Abramov Suz Hinton Una Kravetz I listened to a ton of podcasts I freakin‚Äô love podcasts. Honestly, I really believe that I turned a corner in my life when I started to spend time listening to them. There‚Äôs a quote that I keep hearing on The Tim Ferriss Show that goes something like:\nYou are the average of the 5 people you associate with most.\nI truly believe in this quote. It‚Äôs honest and true. Having access to influential and smart people such as those that put their thoughts and ideas out into the world through podcasting is so valuable and has cultivated a mindset of work ethic and focused action that I try to apply every day. These podcasts fuel the fire inside me that keeps me moving forward.\nMy commutes used to be filled with listening to music and, although enjoyable, doesn‚Äôt bring much intellectual value. I would encourage anyone who hasn‚Äôt listened to a podcast to give them a shot. There are so many and you will no doubt find one that hits home for you. Below are some of my favorites:\nSoftware related Front End Happy Hour Syntax FM ShopTalk Show The Changelog Podcasts Other favorites The Tim Ferriss Show RadioLab The Joe Rogan Experience Listen Money Matters StarTalk Freakonomics As far as listening goes, I use an application called Overcast. It‚Äôs seriously awesome. I can group podcasts by category, I can delete podcasts if I don‚Äôt want to listen to them, I can go through a podcast‚Äôs archive and download old shows to my phone for offline listening, and I can speed up the podcast to listen faster. I‚Äôm around 1.5x right now. My girlfriend thinks I‚Äôm on drugs.\nI paid off my student loans I don‚Äôt have much to say here other than, f**k yes.\nWhat could I do to improve? 2017 was a hell of a year, but there are some things I didn‚Äôt get to accomplish, and some things that I could definitely do better.\nOne of the things I didn‚Äôt accomplish was contributing to an open source project. This is an important goal for me that I will be pursuing in 2018. Open source can be intimdating, and often times I find myself not knowing where to start. If there‚Äôs one thing I‚Äôve learned in 2017 it‚Äôs that the best way to do something in software is just to get your hands dirty.\nI also didn‚Äôt work on as many side projects as I‚Äôd planned on. Some of this can be attributed to lack of ideas, some can be attributed to laziness.\nI‚Äôd like to see myself improve my time management. Increasing my productivity and using my time more efficiently will allow me to get more done in front of the computer while spending more time away from it.\nThe last thing I‚Äôd like to improve upon is writing. I want to fill this blog up to the brim in 2018 about everything that I‚Äôm learning, issues that I‚Äôm having, or life lessons that smack me in the face. I will be spending a lot of time trying to push my skills to the next level this year, experimenting with new technologies and building out some ideas that I‚Äôve been contimplating recently. I fully plan to document everything here along the way.\nüëæ\n","description":"Now that 2018 is upon us, it‚Äôs a great time to reflect on 2017.","tags":["Musings"],"title":"2017 In Review","uri":"/blog/2017-in-review/"},{"categories":null,"content":"I don‚Äôt even know how it feels to ‚Äúwrite‚Äù. I did it in high school and college, although the outcome of those assignments were mostly bullshit anyway. As in, I bullshit 5 pages worth of ‚ÄòWhy Marketing is Crucial for Small Businesses‚Äô.\nMy journey up until this point has been different, but still common in the circle of self-taught developers. I‚Äôm finally in a role where I‚Äôm solving real problems for real people with code that I wrote.\nI owe this to hundreds of unthanked bloggers along the way. Articles that got me through this problem and that. It‚Äôs the brilliant thing about this industry. You may think that the problem you currently face is the problem that will end you. But I guarantee that someone out there has faced it before. And chances are they‚Äôve written about it.\nThis is the intersection of programming and writing. Anyone can share their thoughts, ideas, experiences, and knowledge about anything at any moment. Just open the laptop and write! Easier said then done, right?\nSometimes I feel that my words are not backed with the experience to teach anyone anything. This is just an excuse I fabricate in my head to keep me from putting in the work. From taking that deep dive. It‚Äôs a crutch. And one I am aiming to lose.\nSo, if you read this and feel the way I feel, understand that although you may think you‚Äôre behind the rest of the pack, you still have something to share with others who are racing to catch up with you.\nüëæ\n","description":"This post outlines why I feel junior developers should think about sharing more of their experiences through blogging.","tags":["Musings"],"title":"On The Importance of Blogging as a Developer","uri":"/blog/blogging-as-a-developer/"}]